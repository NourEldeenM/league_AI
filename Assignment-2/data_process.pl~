process_grid(Grid) :-
    % delete all old facts
    retractall(drone(_,_)),
    retractall(obstacle(_,_)),
    retractall(delivery(_,_)),
    retractall(grid_size(_,_)),

    % get the size of the grid
    length(Grid, RowLength),
    Grid = [FirstRow|_],
    length(FirstRow, ColumnLength),

    % make a new facts for the grid size
    assertz(grid_size(RowLength, ColumnLength)),

    % extracting the positions of objects
    make_positions(Grid,0).


process_grid(Grid, EnergyLimit) :-
    % delete all old facts
    retractall(drone(_,_)),
    retractall(obstacle(_,_)),
    retractall(delivery(_,_)),
    retractall(grid_size(_,_)),
    retractall(energy_limit(_)),

    % get the size of the grid
    length(Grid, RowLength),
    Grid = [FirstRow|_],
    length(FirstRow, ColumnLength),

    % make a new facts for the grid size
    assertz(grid_size(RowLength, ColumnLength)),

    % extracting the positions of objects
    make_positions(Grid,0),
    assertz(energy_limit(EnergyLimit)).



% separate each row, assign its index and process its elements
make_positions([],_).
make_positions([Row|Rest],Index) :-
    make_positions_row(Row,Index,0),
    NextIndex is Index + 1,
    make_positions(Rest,NextIndex).

% takes a row and its index, and process each element and make a fact for it
make_positions_row([], _, _).

make_positions_row([Element|Rest], RowIndex, ColumnIndex) :-
    (
        % if -> then ; else
        Element = d -> assertz(drone(RowIndex, ColumnIndex)) ;
        Element = p -> assertz(delivery(RowIndex, ColumnIndex)) ;
        Element = o -> assertz(obstacle(RowIndex, ColumnIndex)) ;                  Element = r -> assertz(recharge(RowIndex, ColumnIndex)) ;
        Element = e -> assertz(empty(RowIndex, ColumnIndex))
    ),
    NewIndex is ColumnIndex + 1,
    make_positions_row(Rest, RowIndex, NewIndex).
